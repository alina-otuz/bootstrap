// ============================================
// GLOBAL VARIABLES
// ============================================
let currentLanguage = 'en';

// Rating System - Select and manipulate star elements
const starContainer = document.querySelector('#rating-stars');
if (starContainer) {
  const stars = starContainer.querySelectorAll('.star');
  let currentRating = 0;

  stars.forEach((star, index) => {
    star.addEventListener('click', () => {
      currentRating = index + 1;
      updateStars(currentRating);
      updateRatingMessage(currentRating);
    });

    star.addEventListener('mouseenter', () => {
      updateStars(index + 1);
    });
  });

  starContainer.addEventListener('mouseleave', () => {
    updateStars(currentRating);
  });

  function updateStars(rating) {
    stars.forEach((star, index) => {
      if (index < rating) {
        star.style.color = '#d62828';
        star.textContent = '‚òÖ';
      } else {
        star.style.color = '#ddd';
        star.textContent = '‚òÜ';
      }
    });
  }
}

// Dynamic Content Update - Modify textContent based on interactions
function updateRatingMessage(rating) {
  const messageElement = document.querySelector('#rating-message');
  if (messageElement) {
    const messages = [
      'Please rate your experience!',
      'Not great, but thanks for your feedback!',
      'Could be better. We\'ll work on it!',
      'Good! We appreciate your feedback!',
      'Great! Glad you enjoyed it!',
      'Excellent! You\'re a true F1 fan!'
    ];
    messageElement.textContent = messages[rating];
  }
}

// Reset Button - Clear all form inputs
const resetButton = document.querySelector('#reset-form-btn');
if (resetButton) {
  resetButton.addEventListener('click', () => {
    document.querySelectorAll('input, select, textarea').forEach(input => {
      if (input.type === 'checkbox' || input.type === 'radio') {
        input.checked = false;
      } else {
        input.value = '';
      }
    });
    
    // Reset rating stars
    if (starContainer) {
      const stars = starContainer.querySelectorAll('.star');
      stars.forEach(star => {
        star.style.color = '#ddd';
        star.textContent = '‚òÜ';
      });
      currentRating = 0;
    }
    
    // Update message
    const messageElement = document.querySelector('#rating-message');
    if (messageElement) {
      messageElement.textContent = 'Form reset successfully!';
    }
  });
}

// ============================================
// SWITCH STATEMENTS - Language Selector
// ============================================

const languageSelector = document.querySelector('#language-selector');
if (languageSelector) {
  languageSelector.addEventListener('change', (e) => {
    currentLanguage = e.target.value;
    changeLanguage(currentLanguage);
  });
}

function changeLanguage(lang) {
  const translations = {
    en: {
      title: 'Formula 1 ‚Äî Speed & Strategy',
      subtitle: 'F1 is the top class of international single-seater auto racing. Quick facts below.',
      description: 'Formula 1, better known as F1, is the pinnacle of motorsport. It\'s the highest class of international open-wheel single-seater Formula auto racing. These words may seem complicated, but they\'re actually pretty simple. F1 is the highest level of racing with a single-seater car and the wheels outside the body of the car. Since F1 is the highest level of Formula auto racing it\'s called Formula 1; it\'s the highest level of motorsport. Junior levels of motorsport are things like Formula 2 and Formula 3, which are feeder series to F1.',
      darkMode: 'üåô Dark Mode',
      lightMode: '‚òÄÔ∏è Light Mode',
      engineSound: 'üîä Play Engine Sound',
      vroom: 'üèéÔ∏è Vroom!',
      topDrivers: 'Top Drivers',
      viewStats: 'View Stats',
      follow: 'Follow',
      raceCalendar: 'Race Calendar',
      viewFullCalendar: 'View Full Calendar',
      raceHighlights: 'Race Highlights',
      highlightsDesc: 'Experience the thrill of Formula 1 racing with our curated collection of historic moments and legendary battles on track.',
      watch: 'Watch',
      share: 'Share',
      teamsTitle: 'F1 Teams 2024',
      searchTeams: 'üîç Search teams by name or country...',
      championships: 'Championships',
      showChampions: 'Show Championship Winners',
      ratingTitle: 'Rate Your Experience',
      ratingQuestion: 'How would you rate our F1 website?',
      ratingMessage: 'Please rate your experience!',
      resetForms: 'Reset All Forms',
      historicMoments: 'Historic F1 Moments',
      newsletter: 'Newsletter',
      subscribe: 'Subscribe',
      formTitle: 'Get Race Notifications',
      formSubtitle: 'Complete the form below and we\'ll notify you about Formula 1 races!',
      name: 'Name',
      email: 'Email address',
      emailHelp: 'We\'ll never share your email with anyone else.',
      favoriteTeam: 'Favorite Team',
      updates: 'Send me race highlights and updates',
      subscribeNow: 'Subscribe Now',
      clearForm: 'Clear Form',
      faq: 'Frequently Asked Questions',
      faqQ1: 'Why do F1 cars spark?',
      faqQ2: 'What are penalty points?',
      faqQ3: 'Can drivers listen to music during a race?',
      faqA1: `Sparks mainly come from the car running very close to the track. With the floor just millimetres off the ground and track surface variances, contact (or near contact) often creates sparks. Cars have a wooden "skid block" under the floor to enforce ride-height rules; if it's worn too much a car can be disqualified. Teams also add small titanium skid elements that strike the track and produce the bright sparks fans see.`,
    faqA2: `Every F1 driver holds a FIA Super License that tracks incidents and penalty points. Different infractions carry different points; if a driver accumulates 12 or more points within 12 months they receive a one-race ban. The system helps enforce safety and consistency on track.`,
    faqA3: `No ‚Äî drivers cannot listen to music during a race. It would be a dangerous distraction. They do, however, have constant radio communication with engineers and the pit wall for strategic and safety messages.`,
      quickNav: 'Quick Navigation',
      aboutF1: 'About F1',
      photoGallery: 'Photo Gallery',
      teams: 'Teams',
      rateUs: 'Rate Us',
      qa: 'Q&A',
      winsRecord: 'Total F1 Wins Record',
      winsRecordText: 'Lewis Hamilton is the most decorated F1 driver with 105 race wins',
      consecutiveChamp: 'Most Consecutive Championships',
      consecutiveChampText: 'Michael Schumacher won 5 seasons back-to-back, starting in 2000',
      fastestSpeed: 'Fastest Speed',
      fastestSpeedText: 'The fastest speed ever recorded in a Formula 1 race is 231.5 mph by Montoya driving for McLaren-Mercedes',
      totalChampionships: 'Total F1 Championships',
       newsletterTitle: 'Newsletter',
    subscribeBtn: 'Subscribe',
    formTitle: 'Get Race Notifications',
    formDesc: "Complete the form below and we'll notify you about Formula 1 races!",
    nameLabel: 'Name',
    emailLabel: 'Email address',
    teamLabel: 'Favorite Team',
    highlightsLabel: 'Send me race highlights and updates',
    submitBtn: 'Subscribe Now',
    resetBtn: 'Clear Form'
    },
    ru: {
      title: '–§–æ—Ä–º—É–ª–∞ 1 ‚Äî –°–∫–æ—Ä–æ—Å—Ç—å –∏ –°—Ç—Ä–∞—Ç–µ–≥–∏—è',
      subtitle: '–§1 - –≤—ã—Å—à–∏–π –∫–ª–∞—Å—Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ–¥–Ω–æ–º–µ—Å—Ç–Ω—ã—Ö –∞–≤—Ç–æ–≥–æ–Ω–æ–∫. –ö—Ä–∞—Ç–∫–∏–µ —Ñ–∞–∫—Ç—ã –Ω–∏–∂–µ.',
      description: '–§–æ—Ä–º—É–ª–∞ 1, –±–æ–ª–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–∫ –§1, —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä—à–∏–Ω–æ–π –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç–∞. –≠—Ç–æ –≤—ã—Å—à–∏–π –∫–ª–∞—Å—Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∞–≤—Ç–æ–≥–æ–Ω–æ–∫ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–ª–µ—Å–∞–º–∏ –∏ –æ–¥–Ω–æ–º–µ—Å—Ç–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏. –≠—Ç–∏ —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è —Å–ª–æ–∂–Ω—ã–º–∏, –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ–Ω–∏ –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã. –§1 - —ç—Ç–æ –≤—ã—Å—à–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–æ–Ω–æ–∫ —Å –æ–¥–Ω–æ–º–µ—Å—Ç–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º, –≥–¥–µ –∫–æ–ª–µ—Å–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–Ω–∞—Ä—É–∂–∏ –∫—É–∑–æ–≤–∞. –ü–æ—Å–∫–æ–ª—å–∫—É –§1 —è–≤–ª—è–µ—Ç—Å—è –≤—ã—Å—à–∏–º —É—Ä–æ–≤–Ω–µ–º –∞–≤—Ç–æ–≥–æ–Ω–æ–∫, –æ–Ω–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –§–æ—Ä–º—É–ª–∞ 1; —ç—Ç–æ –≤—ã—Å—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç–∞. –ú–ª–∞–¥—à–∏–µ —É—Ä–æ–≤–Ω–∏ –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç–∞ - —ç—Ç–æ —Ç–∞–∫–∏–µ —Å–µ—Ä–∏–∏, –∫–∞–∫ –§–æ—Ä–º—É–ª–∞ 2 –∏ –§–æ—Ä–º—É–ª–∞ 3, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–µ—Ä–∏—è–º–∏ –¥–ª—è –§1.',
      darkMode: 'üåô –¢–µ–º–Ω–∞—è –¢–µ–º–∞',
      lightMode: '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è –¢–µ–º–∞',
      engineSound: 'üîä –ó–≤—É–∫ –î–≤–∏–≥–∞—Ç–µ–ª—è',
      vroom: 'üèéÔ∏è –í—Ä—É–º!',
      topDrivers: '–õ—É—á—à–∏–µ –ì–æ–Ω—â–∏–∫–∏',
      viewStats: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
      follow: '–°–ª–µ–¥–∏—Ç—å',
      raceCalendar: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ì–æ–Ω–æ–∫',
      viewFullCalendar: '–ü–æ–ª–Ω—ã–π –ö–∞–ª–µ–Ω–¥–∞—Ä—å',
      raceHighlights: '–õ—É—á—à–∏–µ –ú–æ–º–µ–Ω—Ç—ã –ì–æ–Ω–æ–∫',
      highlightsDesc: '–ò—Å–ø—ã—Ç–∞–π—Ç–µ –æ—Å—Ç—Ä—ã–µ –æ—â—É—â–µ–Ω–∏—è –≥–æ–Ω–æ–∫ –§–æ—Ä–º—É–ª—ã 1 —Å –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–æ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –±–∏—Ç–≤ –Ω–∞ —Ç—Ä–µ–∫–µ.',
      watch: '–°–º–æ—Ç—Ä–µ—Ç—å',
      share: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
      teamsTitle: '–ö–æ–º–∞–Ω–¥—ã –§1 2024',
      searchTeams: 'üîç –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å—Ç—Ä–∞–Ω–µ...',
      championships: '–ß–µ–º–ø–∏–æ–Ω—Å—Ç–≤',
      showChampions: '–ü–æ–∫–∞–∑–∞—Ç—å –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ß–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤',
      ratingTitle: '–û—Ü–µ–Ω–∏—Ç–µ –í–∞—à –û–ø—ã—Ç',
      ratingQuestion: '–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—à —Å–∞–π—Ç –æ –§1?',
      ratingMessage: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç!',
      resetForms: '–°–±—Ä–æ—Å–∏—Ç—å –í—Å–µ –§–æ—Ä–º—ã',
      historicMoments: '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ú–æ–º–µ–Ω—Ç—ã –§1',
      newsletter: '–ù–æ–≤–æ—Å—Ç–Ω–∞—è –†–∞—Å—Å—ã–ª–∫–∞',
      subscribe: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
      formTitle: '–ü–æ–ª—É—á–∞–π—Ç–µ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ì–æ–Ω–∫–∞—Ö',
      formSubtitle: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ, –∏ –º—ã –±—É–¥–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≥–æ–Ω–∫–∞—Ö –§–æ—Ä–º—É–ª—ã 1!',
      name: '–ò–º—è',
      email: 'Email –∞–¥—Ä–µ—Å',
      emailHelp: '–ú—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤–∞—à email —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.',
      favoriteTeam: '–õ—é–±–∏–º–∞—è –ö–æ–º–∞–Ω–¥–∞',
      updates: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ –æ–±–∑–æ—Ä—ã –≥–æ–Ω–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      subscribeNow: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –°–µ–π—á–∞—Å',
      clearForm: '–û—á–∏—Å—Ç–∏—Ç—å –§–æ—Ä–º—É',
      faq: '–ß–∞—Å—Ç–æ –ó–∞–¥–∞–≤–∞–µ–º—ã–µ –í–æ–ø—Ä–æ—Å—ã',
      faqQ1: '–ü–æ—á–µ–º—É –º–∞—à–∏–Ω—ã –§1 –∏—Å–∫—Ä—è—Ç?',
      faqQ2: '–ß—Ç–æ —Ç–∞–∫–æ–µ —à—Ç—Ä–∞—Ñ–Ω—ã–µ –æ—á–∫–∏?',
      faqQ3: '–ú–æ–≥—É—Ç –ª–∏ –≥–æ–Ω—â–∏–∫–∏ —Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É –≤–æ –≤—Ä–µ–º—è –≥–æ–Ω–∫–∏?',
      faqA1: `–ò—Å–∫—Ä—ã –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø–æ—Ç–æ–º—É, —á—Ç–æ –¥–Ω–∏—â–µ –±–æ–ª–∏–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—Å–µ–≥–æ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö –æ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Ç—Ä–∞—Å—Å—ã. –ù–µ—Ä–æ–≤–Ω–æ—Å—Ç–∏ –∏ –∫–æ–ª–µ–±–∞–Ω–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å —Ç–∞–∫–æ–π –º–∞–ª–µ–Ω—å–∫–æ–π –ø–æ—Å–∞–¥–∫–æ–π –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –∏—Å–∫—Ä–µ–Ω–∏—é –ø—Ä–∏ –∫–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–¥ –¥–Ω–∏—â–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π ¬´—Å–∫–∏–¥-–±–ª–æ–∫¬ª (plank) –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ–ø—É—Å–∫–∞–µ–º–æ–π –≤—ã—Å–æ—Ç—ã ‚Äî –ø—Ä–∏ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–º —Å—Ç–∞—á–∏–≤–∞–Ω–∏–∏ –º–∞—à–∏–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞. –ö–æ–º–∞–Ω–¥—ã —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ —Ç–∏—Ç–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –∫–∞—Å–∞—é—Ç—Å—è —Ç—Ä–∞—Å—Å—ã –∏ –¥–∞—é—Ç —è—Ä–∫—É—é –∏—Å–∫—Ä—É, —É–º–µ–Ω—å—à–∞—è –∏–∑–Ω–æ—Å –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞.`,
    faqA2: `–£ –∫–∞–∂–¥–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞ –µ—Å—Ç—å –°—É–ø–µ—Ä–ª–∏—Ü–µ–Ω–∑–∏—è FIA, –≥–¥–µ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ —à—Ç—Ä–∞—Ñ–Ω—ã–µ –æ—á–∫–∏. –†–∞–∑–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–∞—é—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤; –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 12 –∏ –±–æ–ª–µ–µ –æ—á–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤ –≥–æ–Ω—â–∏–∫—É –≤—ã–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ–¥–Ω—É –≥–æ–Ω–∫—É. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–∑–≤–∞–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –Ω–∞ —Ç—Ä–∞—Å—Å–µ.`,
    faqA3: `–ù–µ—Ç ‚Äî –≥–æ–Ω—â–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç —Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É –≤–æ –≤—Ä–µ–º—è –≥–æ–Ω–∫–∏, —ç—Ç–æ –±—ã–ª–æ –±—ã —Å–ª–∏—à–∫–æ–º –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–º –∏ –æ–ø–∞—Å–Ω—ã–º. –ó–∞—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Ä–∞–¥–∏–æ—Å–≤—è–∑—å —Å –∏–Ω–∂–µ–Ω–µ—Ä–∞–º–∏ –∏ –ø–∏—Ç-–≤–æ–ª–ª–æ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π.`
,quickNav: '–ë—ã—Å—Ç—Ä–∞—è –ù–∞–≤–∏–≥–∞—Ü–∏—è',
      aboutF1: '–û –§1',
      photoGallery: '–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è',
      teams: '–ö–æ–º–∞–Ω–¥—ã',
      rateUs: '–û—Ü–µ–Ω–∏—Ç–µ –ù–∞—Å',
      qa: '–í–æ–ø—Ä–æ—Å—ã –∏ –û—Ç–≤–µ—Ç—ã',
      winsRecord: '–†–µ–∫–æ—Ä–¥ –ü–æ–±–µ–¥ –≤ –§1',
      winsRecordText: '–õ—å—é–∏—Å –•—ç–º–∏–ª—Ç–æ–Ω - —Å–∞–º—ã–π —Ç–∏—Ç—É–ª–æ–≤–∞–Ω–Ω—ã–π –≥–æ–Ω—â–∏–∫ –§1 —Å–æ 105 –ø–æ–±–µ–¥–∞–º–∏',
      consecutiveChamp: '–ù–∞–∏–±–æ–ª—å—à–µ–µ –ß–∏—Å–ª–æ –ß–µ–º–ø–∏–æ–Ω—Å—Ç–≤ –ü–æ–¥—Ä—è–¥',
      consecutiveChampText: '–ú–∏—Ö–∞—ç–ª—å –®—É–º–∞—Ö–µ—Ä –≤—ã–∏–≥—Ä–∞–ª 5 —Å–µ–∑–æ–Ω–æ–≤ –ø–æ–¥—Ä—è–¥, –Ω–∞—á–∏–Ω–∞—è —Å 2000 –≥–æ–¥–∞',
      fastestSpeed: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –°–∫–æ—Ä–æ—Å—Ç—å',
      fastestSpeedText: '–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –§1 —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 372,6 –∫–º/—á, –µ—ë –ø–æ–∫–∞–∑–∞–ª –ú–æ–Ω—Ç–æ–π—è –Ω–∞ McLaren-Mercedes',
      totalChampionships: '–í—Å–µ–≥–æ –ß–µ–º–ø–∏–æ–Ω—Å—Ç–≤ –§1',
       newsletterTitle: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏',
    subscribeBtn: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
    formTitle: '–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–Ω–∫–∞—Ö',
    formDesc: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã –±—É–¥–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≥–æ–Ω–∫–∞—Ö –§–æ—Ä–º—É–ª—ã-1!',
    nameLabel: '–ò–º—è',
    emailLabel: 'Email –∞–¥—Ä–µ—Å',
    teamLabel: '–õ—é–±–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞',
    highlightsLabel: '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ö–∞–π–ª–∞–π—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
    submitBtn: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
    resetBtn: '–û—á–∏—Å—Ç–∏—Ç—å'
    },
    kz: {
      title: '–§–æ—Ä–º—É–ª–∞ 1 ‚Äî –ñ—ã–ª–¥–∞–º–¥—ã“õ –ø–µ–Ω –°—Ç—Ä–∞—Ç–µ–≥–∏—è',
      subtitle: '–§1 - —Ö–∞–ª—ã“õ–∞—Ä–∞–ª—ã“õ –±—ñ—Ä –æ—Ä—ã–Ω–¥—ã“õ –∞–≤—Ç–æ–∫”©–ª—ñ–∫ –∂–∞—Ä—ã—Å—Ç–∞—Ä—ã–Ω—ã“£ –∂–æ“ì–∞—Ä—ã –∫–ª–∞—Å—ã. “ö—ã—Å“õ–∞—à–∞ –¥–µ—Ä–µ–∫—Ç–µ—Ä —Ç”©–º–µ–Ω–¥–µ.',
      description: '–§–æ—Ä–º—É–ª–∞ 1, –§1 –¥–µ–ø —Ç–µ –±–µ–ª–≥—ñ–ª—ñ, –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç—Ç—ã“£ —à—ã“£—ã –±–æ–ª—ã–ø —Ç–∞–±—ã–ª–∞–¥—ã. –ë“±–ª –∞—à—ã“õ –¥”©“£–≥–µ–ª–µ–∫—Ç—ñ –±—ñ—Ä –æ—Ä—ã–Ω–¥—ã“õ –∞–≤—Ç–æ–∫”©–ª—ñ–∫—Ç–µ—Ä–¥–µ–≥—ñ —Ö–∞–ª—ã“õ–∞—Ä–∞–ª—ã“õ –∞–≤—Ç–æ–∂–∞—Ä—ã—Å—Ç–∞—Ä–¥—ã“£ –∂–æ“ì–∞—Ä—ã –∫–ª–∞—Å—ã. –ë“±–ª —Å”©–∑–¥–µ—Ä –∫“Ø—Ä–¥–µ–ª—ñ –±–æ–ª—ã–ø –∫”©—Ä—ñ–Ω—É—ñ –º“Ø–º–∫—ñ–Ω, –±—ñ—Ä–∞“õ —à—ã–Ω –º”ô–Ω—ñ–Ω–¥–µ –æ–ª–∞—Ä ”©—Ç–µ “õ–∞—Ä–∞–ø–∞–π—ã–º. –§1 - –±“±–ª –¥”©“£–≥–µ–ª–µ–∫—Ç–µ—Ä—ñ –∫—É–∑–æ–≤—Ç—ã“£ —Å—ã—Ä—Ç—ã–Ω–¥–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω –±—ñ—Ä –æ—Ä—ã–Ω–¥—ã“õ –∞–≤—Ç–æ–∫”©–ª—ñ–∫–ø–µ–Ω –∂–∞—Ä—ã—Å—É–¥—ã“£ –µ“£ –∂–æ“ì–∞—Ä—ã –¥–µ“£–≥–µ–π—ñ. –§1 —Ñ–æ—Ä–º—É–ª–∞–ª—ã“õ –∞–≤—Ç–æ–∂–∞—Ä—ã—Å—Ç–∞—Ä–¥—ã“£ –µ“£ –∂–æ“ì–∞—Ä—ã –¥–µ“£–≥–µ–π—ñ –±–æ–ª“ì–∞–Ω–¥—ã“õ—Ç–∞–Ω, –æ–ª –§–æ—Ä–º—É–ª–∞ 1 –¥–µ–ø –∞—Ç–∞–ª–∞–¥—ã; –±“±–ª –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç—Ç—ã“£ –µ“£ –∂–æ“ì–∞—Ä—ã –¥–µ“£–≥–µ–π—ñ. –ê–≤—Ç–æ—Å–ø–æ—Ä—Ç—Ç—ã“£ –∫—ñ—à—ñ –¥–µ“£–≥–µ–π–ª–µ—Ä—ñ - –±“±–ª –§–æ—Ä–º—É–ª–∞ 2 –∂”ô–Ω–µ –§–æ—Ä–º—É–ª–∞ 3 —Å–∏—è“õ—Ç—ã —Å–µ—Ä–∏—è–ª–∞—Ä, –æ–ª–∞—Ä –§1-–≥–µ –¥–∞–π—ã–Ω–¥—ã“õ —Å–µ—Ä–∏—è–ª–∞—Ä—ã –±–æ–ª—ã–ø —Ç–∞–±—ã–ª–∞–¥—ã.',
      darkMode: 'üåô “ö–∞—Ä–∞“£“ì—ã –¢–∞“õ—ã—Ä—ã–ø',
      lightMode: '‚òÄÔ∏è –ê—à—ã“õ –¢–∞“õ—ã—Ä—ã–ø',
      engineSound: 'üîä “ö–æ–∑“ì–∞–ª—Ç“õ—ã—à –î—ã–±—ã—Å—ã',
      vroom: 'üèéÔ∏è –í—Ä—É–º!',
      topDrivers: '“Æ–∑–¥—ñ–∫ –ñ–∞—Ä—ã—Å—à—ã–ª–∞—Ä',
      viewStats: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
      follow: '–ë–∞“õ—ã–ª–∞—É',
      raceCalendar: '–ñ–∞—Ä—ã—Å –ö“Ø–Ω—Ç—ñ–∑–±–µ—Å—ñ',
      viewFullCalendar: '–¢–æ–ª—ã“õ –ö“Ø–Ω—Ç—ñ–∑–±–µ',
      raceHighlights: '–ñ–∞—Ä—ã—Å—Ç—ã“£ –ï“£ –ñ–∞“õ—Å—ã –°”ô—Ç—Ç–µ—Ä—ñ',
      highlightsDesc: '–§–æ—Ä–º—É–ª–∞ 1 –∂–∞—Ä—ã—Å—ã–Ω—ã“£ “õ—ã–∑—ã“ì—ã–Ω –±—ñ–∑–¥—ñ“£ —Ç–∞—Ä–∏—Ö–∏ —Å”ô—Ç—Ç–µ—Ä –º–µ–Ω —Ç—Ä–µ–∫–¥–µ–≥—ñ –∞“£—ã–∑–¥—ã —à–∞–π“õ–∞—Å—Ç–∞—Ä –∂–∏–Ω–∞“ì—ã–º–µ–Ω —Å–µ–∑—ñ–Ω—ñ“£—ñ–∑.',
      watch: '–ö”©—Ä—É',
      share: '–ë”©–ª—ñ—Å—É',
      teamsTitle: '–§1 –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã 2024',
      searchTeams: 'üîç –ê—Ç–∞—É—ã –Ω–µ–º–µ—Å–µ –µ–ª—ñ –±–æ–π—ã–Ω—à–∞ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã —ñ–∑–¥–µ—É...',
      championships: '–ß–µ–º–ø–∏–æ–Ω–∞—Ç—Ç–∞—Ä',
      showChampions: '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ñ–µ“£—ñ–º–ø–∞–∑–¥–∞—Ä—ã–Ω –ö”©—Ä—Å–µ—Ç—É',
      ratingTitle: '–¢”ô–∂—ñ—Ä–∏–±–µ“£—ñ–∑–¥—ñ –ë–∞“ì–∞–ª–∞“£—ã–∑',
      ratingQuestion: '–ë—ñ–∑–¥—ñ“£ –§1 —Å–∞–π—Ç—ã–Ω “õ–∞–ª–∞–π –±–∞“ì–∞–ª–∞—Ä –µ–¥—ñ“£—ñ–∑?',
      ratingMessage: '–¢”ô–∂—ñ—Ä–∏–±–µ“£—ñ–∑–¥—ñ –±–∞“ì–∞–ª–∞“£—ã–∑!',
      resetForms: '–ë–∞—Ä–ª—ã“õ –ü—ñ—à—ñ–Ω–¥–µ—Ä–¥—ñ –¢–∞–∑–∞–ª–∞—É',
      historicMoments: '–§1-–¥—ñ“£ –¢–∞—Ä–∏—Ö–∏ –°”ô—Ç—Ç–µ—Ä—ñ',
      newsletter: '–ñ–∞“£–∞–ª—ã“õ—Ç–∞—Ä –¢–∞—Ä–∞—Ç—É',
      subscribe: '–ñ–∞–∑—ã–ª—É',
      formTitle: '–ñ–∞—Ä—ã—Å –¢—É—Ä–∞–ª—ã –•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã –ê–ª—ã“£—ã–∑',
      formSubtitle: '–¢”©–º–µ–Ω–¥–µ–≥—ñ –ø—ñ—à—ñ–Ω–¥—ñ —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑, –±—ñ–∑ —Å—ñ–∑–≥–µ –§–æ—Ä–º—É–ª–∞ 1 –∂–∞—Ä—ã—Å—Ç–∞—Ä—ã —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–π–º—ã–∑!',
      name: '–ê—Ç—ã',
      email: 'Email –º–µ–∫–µ–Ω–∂–∞–π—ã',
      emailHelp: '–ë—ñ–∑ —Å—ñ–∑–¥—ñ“£ email-–¥—ñ –µ—à–∫—ñ–º–º–µ–Ω –±”©–ª—ñ—Å–ø–µ–π–º—ñ–∑.',
      favoriteTeam: '–°“Ø–π—ñ–∫—Ç—ñ –ö–æ–º–∞–Ω–¥–∞',
      updates: '–ú–∞“ì–∞–Ω –∂–∞—Ä—ã—Å—Ç—ã“£ –µ“£ –∂–∞“õ—Å—ã —Å”ô—Ç—Ç–µ—Ä—ñ–Ω –∂”ô–Ω–µ –∂–∞“£–∞—Ä—Ç—É–ª–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—É',
      subscribeNow: '“ö–∞–∑—ñ—Ä –ñ–∞–∑—ã–ª—É',
      clearForm: '–ü—ñ—à—ñ–Ω–¥—ñ –¢–∞–∑–∞–ª–∞—É',
      faq: '–ñ–∏—ñ “ö–æ–π—ã–ª–∞—Ç—ã–Ω –°“±—Ä–∞“õ—Ç–∞—Ä',
      faqQ1: '–ù–µ–ª—ñ–∫—Ç–µ–Ω –§1 –º–∞—à–∏–Ω–∞–ª–∞—Ä—ã “±—à“õ—ã–Ω–¥–∞–π–¥—ã?',
      faqQ2: '–ê–π—ã–ø–ø“±–ª “±–ø–∞–π–ª–∞—Ä—ã –¥–µ–≥–µ–Ω—ñ–º—ñ–∑ –Ω–µ?',
      faqQ3: '–ñ–∞—Ä—ã—Å—à—ã–ª–∞—Ä –∂–∞—Ä—ã—Å –∫–µ–∑—ñ–Ω–¥–µ –º—É–∑—ã–∫–∞ —Ç—ã“£–¥–∞–π –∞–ª–∞ –º–∞?',
      faqA1: `“∞—à“õ—ã–Ω—ã–Ω –Ω–µ–≥—ñ–∑—ñ–Ω–µ–Ω –∫”©–ª—ñ–∫ –µ—Ö–ø–∞–∂—ã–Ω—ã“£ –∂–æ–ª –±–µ—Ç—ñ–Ω–µ ”©—Ç–µ –∂–∞“õ—ã–Ω –æ—Ä–Ω–∞–ª–∞—Å—É—ã–Ω–∞–Ω –ø–∞–π–¥–∞ –±–æ–ª–∞–¥—ã. –î–Ω–∏—â–µ—Å—ñ –º–∏–ª–ª–∏–º–µ—Ç—Ä–ª–µ—Ä–≥–µ –¥–µ–π—ñ–Ω —Ç”©–º–µ–Ω –±–æ–ª“ì–∞–Ω–¥—ã“õ—Ç–∞–Ω, —Ç—Ä–∞—Å—Å–∞–¥–∞“ì—ã –æ–π—ã“õ—Ç–∞—Ä –º–µ–Ω —Ç–µ“£—Å—ñ–∑–¥—ñ–∫—Ç–µ—Ä –∂–∞–Ω–∞—Å—É–¥—ã –Ω–µ–º–µ—Å–µ “õ–∞—Ç—Ç—ã –∂–∞“õ—ã–Ω–¥–∞—É–¥—ã —Ç—É–¥—ã—Ä—ã–ø, “±—à“õ—ã–Ω —à—ã“ì–∞—Ä–∞–¥—ã. –î–Ω–∏—â–µ–¥–µ ¬´—Å–∫–∏–¥-–±–ª–æ–∫¬ª (–∞“ì–∞—à —Ç–∞“õ—Ç–∞) –±–∞—Ä ‚Äî –æ–Ω—ã“£ –µ—Å–∫—ñ—Ä—ñ–ø —Ç–æ–∑—É—ã —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—Ç—ñ –±“±–∑—Å–∞, –º–∞—à–∏–Ω–∞ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞–Ω—É—ã –º“Ø–º–∫—ñ–Ω. –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Ç–æ–∑—É–¥—ã –∞–∑–∞–π—Ç—É –∂”ô–Ω–µ –∂–∞—Ä“õ—ã–Ω “±—à“õ—ã–Ω –∞–ª—É “Ø—à—ñ–Ω –∫–µ–π –∂–µ—Ä–ª–µ—Ä–≥–µ —Ç–∏—Ç–∞–Ω “õ–æ–π–º–∞–ª–∞—Ä—ã–Ω “õ–æ—è–¥—ã.`,
    faqA2: `”ò—Ä–±—ñ—Ä –≥–æ–Ω—â–∏–∫—Ç–µ FIA –°—É–ø–µ—Ä–ª–∏—Ü–µ–Ω–∑–∏—è—Å—ã –±–∞—Ä, –æ–Ω–¥–∞ –∂–æ–ª –µ—Ä–µ–∂–µ—Å—ñ–Ω –±“±–∑“ì–∞–Ω—ã “Ø—à—ñ–Ω –∞–π—ã–ø–ø“±–ª “±–ø–∞–π–ª–∞—Ä—ã —Ç—ñ—Ä–∫–µ–ª–µ–¥—ñ. –¢“Ø—Ä–ª—ñ –µ—Ä–µ–∂–µ–ª–µ—Ä–≥–µ ”ô—Ä—Ç“Ø—Ä–ª—ñ “±–ø–∞–π–ª–∞—Ä “õ–æ–π—ã–ª–∞–¥—ã; –µ–≥–µ—Ä –≥–æ–Ω—â–∏–∫ 12 –Ω–µ–º–µ—Å–µ –æ–¥–∞–Ω –∫”©–ø “±–ø–∞–π –∂–∏–Ω–∞—Å–∞ ‚Äî 12 –∞–π —ñ—à—ñ–Ω–¥–µ –±—ñ—Ä –∂–∞—Ä—ã—Å—Ç–∞–Ω —à–µ—Ç—Ç–µ—Ç—ñ–ª–µ–¥—ñ. –ë“±–ª –∂“Ø–π–µ “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ –ø–µ–Ω —Ç”ô—Ä—Ç—ñ–ø—Ç—ñ “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç—É–≥–µ –±–∞“ì—ã—Ç—Ç–∞–ª“ì–∞–Ω.`,
    faqA3: `–ñ–æ“õ ‚Äî –∂–∞—Ä—ã—Å—à—ã–ª–∞—Ä –∂–∞—Ä—ã—Å –∫–µ–∑—ñ–Ω–¥–µ –º—É–∑—ã–∫–∞ —Ç—ã“£–¥–∞–π –∞–ª–º–∞–π–¥—ã, ”©–π—Ç–∫–µ–Ω—ñ –±“±–ª “õ–∞—É—ñ–ø—Ç—ñ –∞–ª–∞“£–¥–∞—É—à—ã–ª—ã“õ —Ç—É–¥—ã—Ä–∞–¥—ã. –ê–ª–∞–π–¥–∞ –æ–ª–∞—Ä –∏–Ω–∂–µ–Ω–µ—Ä–ª–µ—Ä–º–µ–Ω –∂”ô–Ω–µ –ø–∏—Ç-–≤–æ–ª–ª–º–µ–Ω —Ä–∞–¥–∏–æ–±–∞–π–ª–∞–Ω—ã—Å –∞—Ä“õ—ã–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª—ã“õ –∂”ô–Ω–µ “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ –±–æ–π—ã–Ω—à–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∞–ª–∞ –∞–ª–∞–¥—ã.`
 ,
      quickNav: '–ñ—ã–ª–¥–∞–º –ù–∞–≤–∏–≥–∞—Ü–∏—è',
      aboutF1: '–§1 —Ç—É—Ä–∞–ª—ã',
      photoGallery: '–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è',
      teams: '–ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä',
      rateUs: '–ë—ñ–∑–¥—ñ –ë–∞“ì–∞–ª–∞“£—ã–∑',
      qa: '–°“±—Ä–∞“õ-–ñ–∞—É–∞–ø',
      winsRecord: '–§1 –ñ–µ“£—ñ—Å—Ç–µ—Ä –†–µ–∫–æ—Ä–¥—ã',
      winsRecordText: '–õ—å—é–∏—Å –•—ç–º–∏–ª—Ç–æ–Ω 105 –∂–µ“£—ñ—Å–ø–µ–Ω –§1-–¥—ñ“£ –µ“£ —Ç–∏—Ç—É–ª–¥—ã –∂–∞—Ä—ã—Å—à—ã—Å—ã',
      consecutiveChamp: '“ö–∞—Ç–∞—Ä—ã–Ω–∞–Ω –ï“£ –ö”©–ø –ß–µ–º–ø–∏–æ–Ω–∞—Ç—Ç–∞—Ä',
      consecutiveChampText: '–ú–∏—Ö–∞—ç–ª—å –®—É–º–∞—Ö–µ—Ä 2000 –∂—ã–ª–¥–∞–Ω –±–∞—Å—Ç–∞–ø “õ–∞—Ç–∞—Ä—ã–Ω–∞–Ω 5 –º–∞—É—Å—ã–º –∂–µ“£–¥—ñ',
      fastestSpeed: '–ï“£ –ñ–æ“ì–∞—Ä—ã –ñ—ã–ª–¥–∞–º–¥—ã“õ',
      fastestSpeedText: '–§1 —Ç–∞—Ä–∏—Ö—ã–Ω–¥–∞“ì—ã –µ“£ –∂–æ“ì–∞—Ä—ã –∂—ã–ª–¥–∞–º–¥—ã“õ 372,6 –∫–º/—Å–∞“ì –±–æ–ª–¥—ã, –æ–Ω—ã –ú–æ–Ω—Ç–æ–π—è McLaren-Mercedes –∫”©–ª—ñ–≥—ñ–Ω–¥–µ –∫”©—Ä—Å–µ—Ç—Ç—ñ',
      totalChampionships: '–§1 –ß–µ–º–ø–∏–æ–Ω–∞—Ç—Ç–∞—Ä—ã–Ω—ã“£ –ñ–∞–ª–ø—ã –°–∞–Ω—ã',
      newsletterTitle: '–ñ–∞“£–∞–ª—ã“õ—Ç–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—É',
    subscribeBtn: '–ñ–∞–∑—ã–ª—É',
    formTitle: '–ñ–∞—Ä—ã—Å —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∞–ª—ã“£—ã–∑',
    formDesc: '–§–æ—Ä–º–∞–Ω—ã —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑ ‚Äî –±—ñ–∑ —Å—ñ–∑–≥–µ –§–æ—Ä–º—É–ª–∞-1 –∂–∞—Ä—ã—Å—Ç–∞—Ä—ã —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–π–º—ã–∑!',
    nameLabel: '–ê—Ç—ã',
    emailLabel: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞',
    teamLabel: '“∞–Ω–∞—Ç–∞—Ç—ã–Ω –∫–æ–º–∞–Ω–¥–∞',
    highlightsLabel: '–ñ–∞—Ä—ã—Å—Ç—ã“£ “Ø–∑—ñ–Ω–¥—ñ–ª–µ—Ä—ñ –º–µ–Ω –∂–∞“£–∞–ª—ã“õ—Ç–∞—Ä—ã–Ω –∂—ñ–±–µ—Ä—É',
    submitBtn: '–ñ–∞–∑—ã–ª—É',
    resetBtn: '–§–æ—Ä–º–∞–Ω—ã —Ç–∞–∑–∞–ª–∞—É'
    }
  };

  switch(lang) {
    case 'en':
      applyTranslations(translations.en);
      break;
    case 'ru':
      applyTranslations(translations.ru);
      break;
    case 'kz':
      applyTranslations(translations.kz);
      break;
    default:
      applyTranslations(translations.en);
  }
}
function applyTranslations(translations) {
  // 'translations' here is an object already (e.g. translations.en)
  if (!translations) return;

  // Main title and subtitle
  const heroTitle = document.querySelector('.hero-title.display-5');
  if (heroTitle) heroTitle.textContent = translations.title || heroTitle.textContent;

  const subtitle = document.querySelector('.text-muted-custom.fst-italic');
  if (subtitle) subtitle.textContent = translations.subtitle || subtitle.textContent;

  const description = document.querySelector('.text-dark.lh-base') || document.querySelector('#description');
  if (description) description.textContent = translations.description || description.textContent;

  // Dark mode button (respect current isDarkMode state)
  const darkModeBtn = document.querySelector('#dark-mode-toggle');
  if (darkModeBtn) {
    darkModeBtn.textContent = isDarkMode ? (translations.lightMode || 'Light') : (translations.darkMode || 'Dark');
  }

  // Newsletter and popup labels
  const newsletterTitle = document.querySelector('#newsletter h2');
  if (newsletterTitle && translations.newsletter) newsletterTitle.textContent = translations.newsletter;

  const subscribeBtn = document.getElementById('showFormBtn');
  if (subscribeBtn && translations.subscribe) subscribeBtn.textContent = translations.subscribe;

  const formTitle = document.querySelector('#popupForm .popup-content h2');
  if (formTitle && translations.formTitle) formTitle.textContent = translations.formTitle;

  const formDesc = document.querySelector('#popupForm .popup-content p');
  if (formDesc && translations.formSubtitle) formDesc.textContent = translations.formSubtitle;

  const nameLabel = document.querySelector('label[for="nameInput"]');
  if (nameLabel && translations.name) nameLabel.textContent = translations.name;

  const emailLabel = document.querySelector('label[for="emailInput"]');
  if (emailLabel && translations.email) emailLabel.textContent = translations.email;

  const teamLabel = document.querySelector('label[for="teamSelect"]');
  if (teamLabel && translations.favoriteTeam) teamLabel.textContent = translations.favoriteTeam;

  const emailHelp = document.querySelector('#emailHelp');
  if (emailHelp && translations.emailHelp) emailHelp.textContent = translations.emailHelp;

  const updatesLabel = document.querySelector('label[for="notificationsCheck"]');
  if (updatesLabel && translations.updates) updatesLabel.textContent = translations.updates;

  const subscribeNowBtn = document.querySelector('.form-custom button[type="submit"]');
  if (subscribeNowBtn && translations.subscribeNow) subscribeNowBtn.textContent = translations.subscribeNow;

  const clearFormBtn = document.querySelector('.form-custom button[type="reset"]');
  if (clearFormBtn && translations.clearForm) clearFormBtn.textContent = translations.clearForm;

  // Sound button (always set to engineSound translation)
  const soundBtn = document.querySelector('#play-sound-btn');
  if (soundBtn && translations.engineSound) soundBtn.textContent = translations.engineSound;

  // Top Drivers section buttons
  const driversTitle = document.querySelector('#drivers .card-title');
  if (driversTitle && translations.topDrivers) driversTitle.textContent = translations.topDrivers;

  const driversBtns = document.querySelectorAll('#drivers .btn-group button');
  if (driversBtns[0] && translations.viewStats) driversBtns[0].textContent = translations.viewStats;
  if (driversBtns[1] && translations.follow) driversBtns[1].textContent = translations.follow;

  // Calendar
  const calendarTitle = document.querySelector('#calendar .card-title');
  if (calendarTitle && translations.raceCalendar) calendarTitle.textContent = translations.raceCalendar;
  const calendarBtn = document.querySelector('#calendar .btn-f1-primary');
  if (calendarBtn && translations.viewFullCalendar) calendarBtn.textContent = translations.viewFullCalendar;

  // Highlights
  const highlightsTitle = document.querySelectorAll('.card-title')[2];
  if (highlightsTitle && translations.raceHighlights) highlightsTitle.textContent = translations.raceHighlights;
  const highlightsDesc = document.querySelector('.card-text.text-muted-custom');
  if (highlightsDesc && translations.highlightsDesc) highlightsDesc.textContent = translations.highlightsDesc;
  const highlightsBtns = document.querySelectorAll('.card:last-of-type .btn-group a, .card:last-of-type .btn-group button');
  if (highlightsBtns[0] && translations.watch) highlightsBtns[0].textContent = translations.watch;
  if (highlightsBtns[1] && translations.share) highlightsBtns[1].textContent = translations.share;

  // Teams section
  const teamsTitle = document.querySelector('#teams h2');
  if (teamsTitle && translations.teamsTitle) teamsTitle.textContent = translations.teamsTitle;
  const teamSearch = document.querySelector('#team-search');
  if (teamSearch && translations.searchTeams) teamSearch.placeholder = translations.searchTeams;
  const championsBtn = document.querySelector('#championship-teams-btn');
  if (championsBtn && translations.showChampions) championsBtn.textContent = translations.showChampions;

  // Rating
  const ratingTitle = document.querySelector('#rating h2');
  if (ratingTitle && translations.ratingTitle) ratingTitle.textContent = translations.ratingTitle;
  const ratingQuestion = document.querySelector('#rating .card-body > p:first-of-type');
  if (ratingQuestion && translations.ratingQuestion) ratingQuestion.textContent = translations.ratingQuestion;
  const ratingMsg = document.querySelector('#rating-message');
  if (ratingMsg && translations.ratingMessage) ratingMsg.textContent = translations.ratingMessage;
  const resetBtn = document.querySelector('#reset-form-btn');
  if (resetBtn && translations.resetForms) resetBtn.textContent = translations.resetForms;

  // Gallery & FAQ
  const galleryTitle = document.querySelector('#gallery h2');
  if (galleryTitle && translations.historicMoments) galleryTitle.textContent = translations.historicMoments;
  const faqTitle = document.querySelector('#faq h2');
  if (faqTitle && translations.faq) faqTitle.textContent = translations.faq;

  // FAQ buttons and answers ‚Äî avoid childNodes indexing
  const faqButtons = document.querySelectorAll('.collapsible');
  if (faqButtons && faqButtons.length >= 3) {
    if (translations.faqQ1) faqButtons[0].textContent = translations.faqQ1;
    if (translations.faqQ2) faqButtons[1].textContent = translations.faqQ2;
    if (translations.faqQ3) faqButtons[2].textContent = translations.faqQ3;
    if (faqButtons[0].nextElementSibling && translations.faqA1) faqButtons[0].nextElementSibling.textContent = translations.faqA1;
    if (faqButtons[1].nextElementSibling && translations.faqA2) faqButtons[1].nextElementSibling.textContent = translations.faqA2;
    if (faqButtons[2].nextElementSibling && translations.faqA3) faqButtons[2].nextElementSibling.textContent = translations.faqA3;
  }

  // Sidebar links & quick stats
  const quickNavTitle = document.querySelector('.sidebar-section h3');
  if (quickNavTitle && translations.quickNav) quickNavTitle.textContent = translations.quickNav;
  const navLinks = document.querySelectorAll('.sidebar-section a');
  if (navLinks && navLinks.length >= 8) {
    if (translations.aboutF1) navLinks[0].textContent = translations.aboutF1;
    if (translations.topDrivers) navLinks[1].textContent = translations.topDrivers;
    if (translations.raceCalendar) navLinks[2].textContent = translations.raceCalendar;
    if (translations.photoGallery) navLinks[3].textContent = translations.photoGallery;
    if (translations.teams) navLinks[4].textContent = translations.teams;
    if (translations.rateUs) navLinks[5].textContent = translations.rateUs;
    if (translations.newsletter) navLinks[6].textContent = translations.newsletter;
    if (translations.qa) navLinks[7].textContent = translations.qa;
  }

  // Stat titles and values
  const statTitles = document.querySelectorAll('.stat-title');
  if (statTitles[0] && translations.winsRecord) statTitles[0].textContent = translations.winsRecord;
  if (statTitles[1] && translations.consecutiveChamp) statTitles[1].textContent = translations.consecutiveChamp;
  if (statTitles[2] && translations.fastestSpeed) statTitles[2].textContent = translations.fastestSpeed;

  const statValues = document.querySelectorAll('.stat-value');
  if (statValues[0] && translations.winsRecordText) statValues[0].textContent = translations.winsRecordText;
  if (statValues[1] && translations.consecutiveChampText) statValues[1].textContent = translations.consecutiveChampText;
  if (statValues[2] && translations.fastestSpeedText) statValues[2].textContent = translations.fastestSpeedText;

  // Update total championships element keep translation label if present
  const totalChampElem = document.querySelector('#total-championships');
  if (totalChampElem) {
    const label = translations.totalChampionships || 'Total F1 Championships';
    totalChampElem.textContent = `${label}: ${totalChampionships}`;
  }
}

// ============================================
// ARRAYS AND LOOPS - Dynamic Item Display
// ============================================

// F1 Teams Array
const f1Teams = [
  { name: 'Red Bull Racing', country: 'Austria', championships: 6 },
  { name: 'Mercedes', country: 'Germany', championships: 8 },
  { name: 'Ferrari', country: 'Italy', championships: 16 },
  { name: 'McLaren', country: 'UK', championships: 8 },
  { name: 'Aston Martin', country: 'UK', championships: 0 },
  { name: 'Alpine', country: 'France', championships: 2 },
  { name: 'Williams', country: 'UK', championships: 9 },
  { name: 'AlphaTauri', country: 'Italy', championships: 1 },
  { name: 'Haas', country: 'USA', championships: 0 },
  { name: 'Alfa Romeo', country: 'Switzerland', championships: 0 }
];

// Display teams dynamically using loops
const teamsContainer = document.querySelector('#teams-list');
if (teamsContainer) {
  let teamsHTML = '<ul class="list-unstyled">';
  
  for (let i = 0; i < f1Teams.length; i++) {
    teamsHTML += `
      <li class="mb-2 p-2 border-bottom">
        <strong>${f1Teams[i].name}</strong> (${f1Teams[i].country}) - 
        <span class="text-muted-custom">${f1Teams[i].championships} Championships</span>
      </li>
    `;
  }
  
  teamsHTML += '</ul>';
  teamsContainer.innerHTML = teamsHTML;
}

// Race schedule array
const raceSchedule = [
  { race: 'Singapore GP', date: 'Oct 3-5', circuit: 'Marina Bay' },
  { race: 'United States GP', date: 'Oct 17-20', circuit: 'Austin' },
  { race: 'Mexico City GP', date: 'Oct 24-27', circuit: 'Aut√≥dromo' },
  { race: 'Brazilian GP', date: 'Nov 1-3', circuit: 'Interlagos' },
  { race: 'Las Vegas GP', date: 'Nov 14-16', circuit: 'Las Vegas Strip' },
  { race: 'Qatar GP', date: 'Nov 21-23', circuit: 'Lusail' },
  { race: 'Abu Dhabi GP', date: 'Nov 28-30', circuit: 'Yas Marina' }
];

// Display schedule using while loop
const scheduleContainer = document.querySelector('#schedule-list');
if (scheduleContainer) {
  let scheduleHTML = '<div class="list-group">';
  let index = 0;
  
  while (index < raceSchedule.length) {
    scheduleHTML += `
      <div class="list-group-item">
        <div class="d-flex w-100 justify-content-between">
          <h5 class="mb-1">${raceSchedule[index].race}</h5>
          <small class="text-muted-custom">${raceSchedule[index].date}</small>
        </div>
        <p class="mb-1">Circuit: ${raceSchedule[index].circuit}</p>
      </div>
    `;
    index++;
  }
  
  scheduleHTML += '</div>';
  scheduleContainer.innerHTML = scheduleHTML;
}

// ============================================
// PLAY SOUNDS
// ============================================

// Sound effect for button clicks
const soundButton = document.querySelector('#play-sound-btn');
if (soundButton) {
  soundButton.addEventListener('click', () => {
    // Create audio context for racing sound effect
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    
    // Create oscillator for engine sound
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    // Racing car engine sound
    oscillator.type = 'sawtooth';
    oscillator.frequency.setValueAtTime(100, audioContext.currentTime);
    oscillator.frequency.exponentialRampToValueAtTime(800, audioContext.currentTime + 0.5);
    
    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.5);
    
    // Visual feedback
    soundButton.textContent = 'üèéÔ∏è Vroom!';
    setTimeout(() => {
      soundButton.textContent = 'üîä Play Engine Sound';
    }, 1000);
  });
}

// Notification sound for form submission
const newsletterForm = document.querySelector('.form-custom');
if (newsletterForm) {
  newsletterForm.addEventListener('submit', (e) => {
    e.preventDefault();
    
    // Play success sound
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    // Success chime
    oscillator.type = 'sine';
    oscillator.frequency.setValueAtTime(523.25, audioContext.currentTime); // C5
    oscillator.frequency.setValueAtTime(659.25, audioContext.currentTime + 0.1); // E5
    oscillator.frequency.setValueAtTime(783.99, audioContext.currentTime + 0.2); // G5
    
    gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.3);
    
    // Show success message
    alert('‚úÖ Successfully subscribed to F1 notifications!');
  });
}

// ============================================
// HIGHER-ORDER FUNCTIONS
// ============================================

// Filter function - Filter teams with championships
const filterTeams = (teams, filterFn) => {
  return teams.filter(filterFn);
};

// Get teams with championships
const championshipTeams = filterTeams(f1Teams, team => team.championships > 0);

// Map function - Transform team data
const mapTeams = (teams, mapFn) => {
  return teams.map(mapFn);
};

// Create simplified team list
const teamNames = mapTeams(f1Teams, team => team.name);

// ForEach function - Apply styling to elements
const applyStylesToElements = (selector, styleFunction) => {
  const elements = document.querySelectorAll(selector);
  elements.forEach(styleFunction);
};

// Example: Apply hover effect to all cards
applyStylesToElements('.card', (card) => {
  card.addEventListener('mouseenter', function() {
    this.style.transform = 'translateY(-5px)';
    this.style.transition = 'transform 0.3s ease';
  });
  
  card.addEventListener('mouseleave', function() {
    this.style.transform = 'translateY(0)';
  });
});

// Custom higher-order function: Create event handler
const createClickHandler = (callback) => {
  return (event) => {
    event.preventDefault();
    callback(event);
  };
};

// Display championship teams with higher-order function
const displayChampionshipTeams = document.querySelector('#championship-teams-btn');
if (displayChampionshipTeams) {
  const handler = createClickHandler((e) => {
    const container = document.querySelector('#championship-teams-list');
    if (container) {
      const teamsHTML = championshipTeams
        .map(team => `
          <div class="alert alert-success">
            <strong>${team.name}</strong> - ${team.championships} Championship${team.championships > 1 ? 's' : ''}
          </div>
        `)
        .join('');
      
      container.innerHTML = teamsHTML;
      container.style.display = 'block';
    }
  });
  
  displayChampionshipTeams.addEventListener('click', handler);
}

// Reduce function - Calculate total championships
const totalChampionships = f1Teams.reduce((total, team) => total + team.championships, 0);

// Display total championships
const championshipCounter = document.querySelector('#total-championships');
if (championshipCounter) {
  championshipCounter.textContent = `Total F1 Championships: ${totalChampionships}`;
}

// ============================================
// BONUS: Interactive Features
// ============================================

// Dark mode toggle with local storage alternative (using session variable)
let isDarkMode = false;
const darkModeToggle = document.querySelector('#dark-mode-toggle');
if (darkModeToggle) {
  darkModeToggle.addEventListener('click', () => {
    isDarkMode = !isDarkMode;
    document.body.classList.toggle('dark-mode');
    darkModeToggle.textContent = isDarkMode ? '‚òÄÔ∏è Light Mode' : 'üåô Dark Mode';
  });
}

// Live search/filter functionality
const searchInput = document.querySelector('#team-search');
if (searchInput) {
  searchInput.addEventListener('input', (e) => {
    const searchTerm = e.target.value.toLowerCase();
    
    const filteredTeams = f1Teams.filter(team => 
      team.name.toLowerCase().includes(searchTerm) ||
      team.country.toLowerCase().includes(searchTerm)
    );
    
    // Update teams display
    const teamsContainer = document.querySelector('#teams-list');
    if (teamsContainer) {
      let teamsHTML = '<ul class="list-unstyled">';
      
      filteredTeams.forEach(team => {
        teamsHTML += `
          <li class="mb-2 p-2 border-bottom">
            <strong>${team.name}</strong> (${team.country}) - 
            <span class="text-muted-custom">${team.championships} Championships</span>
          </li>
        `;
      });
      
      if (filteredTeams.length === 0) {
        teamsHTML = '<p class="text-muted-custom">No teams found.</p>';
      } else {
        teamsHTML += '</ul>';
      }
      
      teamsContainer.innerHTML = teamsHTML;
    }
  });
}

var coll = document.getElementsByClassName("collapsible");
var i;

for (i = 0; i < coll.length; i++) {
  coll[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var content = this.nextElementSibling;
    if (content.style.maxHeight){
      content.style.maxHeight = null;
    } else {
      content.style.maxHeight = content.scrollHeight + "px";
    }
  });
}
// ============================================
// TASK 4: COLORFUL SCROLL PROGRESS BAR
// ============================================
$(document).scroll(function () {
  var scrollAmount = $(window).scrollTop();
  var documentHeight = $(document).height();
  var windowHeight = $(window).height();
  var scrollPercent = (scrollAmount / (documentHeight - windowHeight)) * 100;
  var roundScroll = Math.round(scrollPercent);
  
  // Update progress bar width and text
  $(".scrollBar").css("width", scrollPercent + "%");
  $(".scrollBar span").text(roundScroll);
});

// ============================================
// TASK 8: COPIED TO CLIPBOARD BUTTON
// ============================================
$(document).ready(function() {
  // Add copy buttons to FAQ content
  $('.content').each(function(index) {
    const content = $(this);
    const copyBtn = $('<button class="copy-btn btn btn-sm btn-outline-secondary mt-2">üìã Copy</button>');
    content.append(copyBtn);
    
    copyBtn.on('click', function(e) {
      e.stopPropagation();
      const textToCopy = content.clone().find('.copy-btn').remove().end().text().trim();
      
      // Create temporary textarea for copying
      const $temp = $('<textarea>');
      $('body').append($temp);
      $temp.val(textToCopy).select();
      document.execCommand('copy');
      $temp.remove();
      
      // Change button appearance
      copyBtn.html('‚úì Copied!').removeClass('btn-outline-secondary').addClass('btn-success');
      
      // Show tooltip
      copyBtn.attr('title', 'Copied to clipboard!');
      
      // Reset after 2 seconds
      setTimeout(function() {
        copyBtn.html('üìã Copy').removeClass('btn-success').addClass('btn-outline-secondary');
        copyBtn.removeAttr('title');
      }, 2000);
    });
  });
  
  // Also handle actual copy events
  $('.content').on('copy', function() {
    console.log('Text copied from FAQ section');
  });
});

// ============================================
// TASK 9: IMAGE LAZY LOADING
// ============================================
$(document).ready(function() {
  // Add lazy loading to carousel images
  $('.carousel-item img').each(function() {
    const $img = $(this);
    const actualSrc = $img.attr('src');
    
    // Store actual src in data attribute and replace with placeholder
    $img.attr('data-src', actualSrc);
    $img.attr('src', 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="800" height="500"%3E%3Crect width="800" height="500" fill="%23f4f7fb"/%3E%3Ctext x="50%25" y="50%25" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-size="24" fill="%2355677a"%3ELoading...%3C/text%3E%3C/svg%3E');
    $img.addClass('lazy-load');
  });
  
  // Function to load images when in viewport
  function lazyLoadImages() {
    $('.lazy-load').each(function() {
      const $img = $(this);
      const imgTop = $img.offset().top;
      const imgBottom = imgTop + $img.height();
      const viewportTop = $(window).scrollTop();
      const viewportBottom = viewportTop + $(window).height();
      
      // Check if image is in viewport (with 200px buffer)
      if (imgBottom > viewportTop - 200 && imgTop < viewportBottom + 200) {
        const actualSrc = $img.attr('data-src');
        if (actualSrc && $img.attr('src') !== actualSrc) {
          $img.attr('src', actualSrc);
          $img.removeClass('lazy-load');
          console.log('Lazy loaded image:', actualSrc);
        }
      }
    });
  }
  
  // Load images on scroll
  $(window).on('scroll', lazyLoadImages);
  
  // Load images on carousel slide
  $('#f1Carousel').on('slide.bs.carousel', function() {
    setTimeout(lazyLoadImages, 100);
  });
  
  // Initial load for images already in viewport
  lazyLoadImages();
});

// ============================================
// TASK 6: LOADING SPINNER ON SUBMIT
// ============================================
$(document).ready(function() {
  $('.form-custom').on('submit', function(e) {
    e.preventDefault();
    
    const $form = $(this);
    const $submitBtn = $form.find('button[type="submit"]');
    const originalText = $submitBtn.html();
    
    // Disable button and show spinner
    $submitBtn.prop('disabled', true);
    $submitBtn.html('<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Please wait...');
    
    // Simulate server call (2 seconds)
    setTimeout(function() {
      // Play success sound
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.type = 'sine';
      oscillator.frequency.setValueAtTime(523.25, audioContext.currentTime);
      oscillator.frequency.setValueAtTime(659.25, audioContext.currentTime + 0.1);
      oscillator.frequency.setValueAtTime(783.99, audioContext.currentTime + 0.2);
      
      gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.3);
      
      // Show success message
      alert('‚úÖ Successfully subscribed to F1 notifications!');
      
      // Reset button
      $submitBtn.html(originalText);
      $submitBtn.prop('disabled', false);
      
      // Close popup
      $('#popupForm').css('display', 'none');
      
      // Reset form
      $form[0].reset();
    }, 2000);
  });
});

// ============================================
// POPUP FORM HANDLING
// ============================================
$(document).ready(function() {
  $('#showFormBtn').on('click', function() {
    $('#popupForm').css('display', 'flex');
  });
  
  $('#closeFormBtn').on('click', function() {
    $('#popupForm').css('display', 'none');
  });
  
  // Close on outside click
  $('#popupForm').on('click', function(e) {
    if ($(e.target).is('#popupForm')) {
      $(this).css('display', 'none');
    }
  });
});

console.log('F1 JavaScript loaded successfully!');
console.log('Championship Teams:', championshipTeams);
console.log('Total Championships:', totalChampionships);